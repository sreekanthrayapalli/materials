Spring boot
-----------
l
Add Security to common application

add dependency to application
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-security</artifactId>
</dependency>

now application will be having security with username "user" and password which printed on console

we can also configure properties for our own username and password
spring.security.user.name
spring.security.user.password

===========================================================
Add our username and password with WebSecurityConfigurerAdapter

@EnableWebSecurity
@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
	@Override
	@Bean
	protected UserDetailsService userDetailsService() {
		List<UserDetails> users = new ArrayList<>();
		users.add(User.withDefaultPasswordEncoder().username("abc").password("xyz").roles("user").build());
		return new InMemoryUserDetailsManager(users);
	}
}

Now application is having security abc with password xyz

==============================================================

Add mysql database with application.properties

add mysql and jpa dependency in pom.xml

<dependency>
<groupId>mysql</groupId>
<artifactId>mysql-connector-java</artifactId>
<version>5.1.46</version>
</dependency>
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

add DaoAuthiticationProvider in Security application

@EnableWebSecurity
@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
	@Autowired
	private UserDetailsService userDetailsService;
		
	@Bean
	public DaoAuthenticationProvider getAuthenticationProvider() {
		DaoAuthenticationProvider dp = new DaoAuthenticationProvider();
		dp.setUserDetailsService(userDetailsService);
		//dp.setPasswordEncoder(NoOpPasswordEncoder.getInstance());
		dp.setPasswordEncoder(new BCryptPasswordEncoder());
		return dp;
	}
}


write UserDetailsServiceImpl class which implements UserDetailsService

@Service
public class MyUserServiceImpl implements UserDetailsService{

	@Autowired
	UserService userService;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User user = userService.findByUsername(username);
		
		return new UserDetailsImpl(user);
	}
}

write UserRepo interface which extends JpaRepository<User, Integer> 

public interface UserService extends JpaRepository<User, Integer> {
	User findByUsername(String username);
}

write UserDetailsImpl class which Implements UserDetails
public class UserDetailsImpl implements UserDetails{
	User user;
	public UserDetailsImpl(User user) {
		this.user = user;
	}
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		List<SimpleGrantedAuthority> list = new ArrayList<>();
		list.add(new SimpleGrantedAuthority("user"));
		return list;
	}
	@Override
	public String getPassword() {
		return user.getPassword();
	}

	@Override
	public String getUsername() {
		return user.getUsername();
	}

	@Override
	public boolean isAccountNonExpired() {
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

	@Override
	public boolean isEnabled() {
		return true;
	}
}


=======================
spring boot with login page

Add below method in springSecurityConfig class
@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable()
		.authorizeRequests().antMatchers("/login").permitAll()
		.anyRequest().authenticated()
		.and()
		.formLogin()
		.loginPage("/login").permitAll()
		.and()
		.logout().invalidateHttpSession(true)
		.clearAuthentication(true)
		.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
		.logoutSuccessUrl("/logout-success").permitAll();
	}


In Controller class add below methods

@RequestMapping("/login")
	public String getLoginpage() {
		return "login";
	}
	
	@RequestMapping("/logout-success")
	public String getLogoutpage() {
		return "logout";
	}

create jsp login page

${SPRING_SECURITY_LAST_EXCEPTION.message }

<form action="/login" method="post">
User:<input type="text" name="username"><br>
password:<input type="password" name="password"><br>

<input type="submit" name="submit">

</form>

=======================================================================
Spring oauth2
------------------

spring oauth2 autoconfiguration 

<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-jose</artifactId>
		</dependency>



@EnableWebSecurity
@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{

	 @Override
	    protected void configure(HttpSecurity http) throws Exception {
	        http.authorizeRequests()
	         .anyRequest().authenticated()
	         .and()
	         .oauth2Login();
	    }

}




spring.security.oauth2.client.registration.google.client-id=981598871685-1j24th1pssi546vjkgc92urbtln95mj8.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=n6hHhi2aVSnB0W9pld32cpXS




